{
  "version": 3,
  "sources": ["../../three/examples/jsm/postprocessing/RenderTransitionPass.js"],
  "sourcesContent": ["import {\n\tHalfFloatType,\n\tShaderMaterial,\n\tWebGLRenderTarget\n} from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\n\nclass RenderTransitionPass extends Pass {\n\n\tconstructor( sceneA, cameraA, sceneB, cameraB ) {\n\n\t\tsuper();\n\n\t\tthis.material = this.createMaterial();\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t\tthis.sceneA = sceneA;\n\t\tthis.cameraA = cameraA;\n\t\tthis.sceneB = sceneB;\n\t\tthis.cameraB = cameraB;\n\n\t\tthis.renderTargetA = new WebGLRenderTarget();\n\t\tthis.renderTargetA.texture.type = HalfFloatType;\n\t\tthis.renderTargetB = new WebGLRenderTarget();\n\t\tthis.renderTargetB.texture.type = HalfFloatType;\n\n\t}\n\n\tsetTransition( value ) {\n\n\t\tthis.material.uniforms.mixRatio.value = value;\n\n\t}\n\n\tuseTexture( value ) {\n\n\t\tthis.material.uniforms.useTexture.value = value ? 1 : 0;\n\n\t}\n\n\tsetTexture( value ) {\n\n\t\tthis.material.uniforms.tMixTexture.value = value;\n\n\t}\n\n\tsetTextureThreshold( value ) {\n\n\t\tthis.material.uniforms.threshold.value = value;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetA.setSize( width, height );\n\t\tthis.renderTargetB.setSize( width, height );\n\n\t}\n\n\trender( renderer, writeBuffer ) {\n\n\t\trenderer.setRenderTarget( this.renderTargetA );\n\t\trenderer.render( this.sceneA, this.cameraA );\n\t\trenderer.setRenderTarget( this.renderTargetB );\n\t\trenderer.render( this.sceneB, this.cameraB );\n\n\t\tconst uniforms = this.fsQuad.material.uniforms;\n\t\tuniforms.tDiffuse1.value = this.renderTargetA.texture;\n\t\tuniforms.tDiffuse2.value = this.renderTargetB.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTargetA.dispose();\n\t\tthis.renderTargetB.dispose();\n\t\tthis.material.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tcreateMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse1: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\ttDiffuse2: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tmixRatio: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tthreshold: {\n\t\t\t\t\tvalue: 0.1\n\t\t\t\t},\n\t\t\t\tuseTexture: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttMixTexture: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = vec2( uv.x, uv.y );\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform float mixRatio;\n\n\t\t\t\tuniform sampler2D tDiffuse1;\n\t\t\t\tuniform sampler2D tDiffuse2;\n\t\t\t\tuniform sampler2D tMixTexture;\n\n\t\t\t\tuniform int useTexture;\n\t\t\t\tuniform float threshold;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel1 = texture2D( tDiffuse1, vUv );\n\t\t\t\t\tvec4 texel2 = texture2D( tDiffuse2, vUv );\n\n\t\t\t\t\tif (useTexture == 1) {\n\n\t\t\t\t\t\tvec4 transitionTexel = texture2D( tMixTexture, vUv );\n\t\t\t\t\t\tfloat r = mixRatio * ( 1.0 + threshold * 2.0 ) - threshold;\n\t\t\t\t\t\tfloat mixf = clamp( ( transitionTexel.r - r ) * ( 1.0 / threshold ), 0.0, 1.0 );\n\n\t\t\t\t\t\tgl_FragColor = mix( texel1, texel2, mixf );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = mix( texel2, texel1, mixRatio );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t`\n\t\t} );\n\n\t}\n\n}\n\nexport { RenderTransitionPass };\n"],
  "mappings": ";;;;;;;;;;;;AAOA,IAAM,uBAAN,cAAmC,KAAK;AAAA,EAEvC,YAAa,QAAQ,SAAS,QAAQ,SAAU;AAE/C,UAAM;AAEN,SAAK,WAAW,KAAK,eAAe;AACpC,SAAK,SAAS,IAAI,eAAgB,KAAK,QAAS;AAEhD,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,UAAU;AAEf,SAAK,gBAAgB,IAAI,kBAAkB;AAC3C,SAAK,cAAc,QAAQ,OAAO;AAClC,SAAK,gBAAgB,IAAI,kBAAkB;AAC3C,SAAK,cAAc,QAAQ,OAAO;AAAA,EAEnC;AAAA,EAEA,cAAe,OAAQ;AAEtB,SAAK,SAAS,SAAS,SAAS,QAAQ;AAAA,EAEzC;AAAA,EAEA,WAAY,OAAQ;AAEnB,SAAK,SAAS,SAAS,WAAW,QAAQ,QAAQ,IAAI;AAAA,EAEvD;AAAA,EAEA,WAAY,OAAQ;AAEnB,SAAK,SAAS,SAAS,YAAY,QAAQ;AAAA,EAE5C;AAAA,EAEA,oBAAqB,OAAQ;AAE5B,SAAK,SAAS,SAAS,UAAU,QAAQ;AAAA,EAE1C;AAAA,EAEA,QAAS,OAAO,QAAS;AAExB,SAAK,cAAc,QAAS,OAAO,MAAO;AAC1C,SAAK,cAAc,QAAS,OAAO,MAAO;AAAA,EAE3C;AAAA,EAEA,OAAQ,UAAU,aAAc;AAE/B,aAAS,gBAAiB,KAAK,aAAc;AAC7C,aAAS,OAAQ,KAAK,QAAQ,KAAK,OAAQ;AAC3C,aAAS,gBAAiB,KAAK,aAAc;AAC7C,aAAS,OAAQ,KAAK,QAAQ,KAAK,OAAQ;AAE3C,UAAM,WAAW,KAAK,OAAO,SAAS;AACtC,aAAS,UAAU,QAAQ,KAAK,cAAc;AAC9C,aAAS,UAAU,QAAQ,KAAK,cAAc;AAE9C,QAAK,KAAK,gBAAiB;AAE1B,eAAS,gBAAiB,IAAK;AAC/B,eAAS,MAAM;AAAA,IAEhB,OAAO;AAEN,eAAS,gBAAiB,WAAY;AACtC,UAAK,KAAK,MAAQ,UAAS,MAAM;AAAA,IAElC;AAEA,SAAK,OAAO,OAAQ,QAAS;AAAA,EAE9B;AAAA,EAEA,UAAU;AAET,SAAK,cAAc,QAAQ;AAC3B,SAAK,cAAc,QAAQ;AAC3B,SAAK,SAAS,QAAQ;AACtB,SAAK,OAAO,QAAQ;AAAA,EAErB;AAAA,EAEA,iBAAiB;AAEhB,WAAO,IAAI,eAAgB;AAAA,MAC1B,UAAU;AAAA,QACT,WAAW;AAAA,UACV,OAAO;AAAA,QACR;AAAA,QACA,WAAW;AAAA,UACV,OAAO;AAAA,QACR;AAAA,QACA,UAAU;AAAA,UACT,OAAO;AAAA,QACR;AAAA,QACA,WAAW;AAAA,UACV,OAAO;AAAA,QACR;AAAA,QACA,YAAY;AAAA,UACX,OAAO;AAAA,QACR;AAAA,QACA,aAAa;AAAA,UACZ,OAAO;AAAA,QACR;AAAA,MACD;AAAA,MACA;AAAA;AAAA,QAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUxB;AAAA;AAAA,QAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiC3B,CAAE;AAAA,EAEH;AAED;",
  "names": []
}
